Node.js Topics for Web Development & Interviews
1. Core Node.js Fundamentals

| #  | Topic                                              | Why It Matters                                |
| -- | -------------------------------------------------- | --------------------------------------------- |
| 1  | **What is Node.js**                                | JS runtime to build server-side apps          |
| 2  | **Node.js Architecture**                           | Event loop, single-threaded, non-blocking I/O |
| 3  | **npm (Node Package Manager)**                     | Managing dependencies and packages            |
| 4  | **CommonJS Modules (`require`, `module.exports`)** | Used in many older Node apps                  |
| 5  | **ES Modules (`import/export`)**                   | Modern module system                          |
| 6  | **Built-in Modules**                               | `fs`, `path`, `os`, `http`, `url`             |
| 7  | **File System (`fs`)**                             | Reading/writing files, working with streams   |
| 8  | **Path Module**                                    | Resolving and formatting file paths           |
| 9  | **HTTP Module**                                    | Creating a basic server without any framework |
| 10 | **Events Module**                                  | Event-driven programming, `EventEmitter`      |
| 11 | **Streams & Buffers**                              | Efficient file and data processing            |


 Intermediate to Advanced Node.js Topics

| #  | Topic                                | Why It Matters                        |
| -- | ------------------------------------ | ------------------------------------- |
| 12 | **Express.js Framework**             | Simplifies building APIs and web apps |
| 13 | **Routing in Express**               | Handling multiple API endpoints       |
| 14 | **Middleware in Express**            | Authentication, error handling, etc.  |
| 15 | **RESTful APIs**                     | Backend for frontend apps             |
| 16 | **Handling JSON & Query Params**     | Reading POST data, query strings      |
| 17 | **Error Handling**                   | Gracefully handling errors            |
| 18 | **Environment Variables (`dotenv`)** | Securing sensitive data               |
| 19 | **CORS**                             | Cross-Origin Resource Sharing in APIs |
| 20 | **Serving Static Files**             | Hosting frontend from Node            |
| 21 | **nodemon**                          | Auto-restart dev server               |
| 22 | **Postman**                          | API testing and development tool      |
| 23 | **CRUD with MongoDB**                | Database operations using Mongoose    |
| 24 | **Mongoose ODM**                     | MongoDB + Node.js integration         |
| 25 | **Async/Await in Express**           | For clean async code in APIs          |
| 26 | **Project Structuring**              | MVC pattern, scalable architecture    |
| 27 | **JWT Authentication**               | Secure login system                   |
| 28 | **bcrypt.js / hashing**              | Password encryption                   |
| 29 | **File Uploads (`multer`)**          | Uploading images/files                |
| 30 | **Rate Limiting / Helmet**           | Security best practices               |
