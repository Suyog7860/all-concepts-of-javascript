// Browser Context API ka ‡§Æ‡§§‡§≤‡§¨ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§π‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§ê‡§∏‡•á ‡§ü‡•Ç‡§≤‡•ç‡§∏ 
// (‡§ú‡•à‡§∏‡•á window, document, localStorage) ‡§¶‡•á‡§§‡§æ ‡§π‡•à ‡§ú‡§ø‡§∏‡§∏‡•á ‡§π‡§Æ ‡§µ‡•á‡§¨‡§™‡•á‡§ú ‡§ï‡•á
// content ‡§ï‡•ã control ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, user ‡§ï‡•Ä info access ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, 
// ‡§î‡§∞ ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§ï‡•ã interactive ‡§¨‡§®‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

// stack
// first In, Last out ‚Üí ‡§ú‡•ã ‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§°‡§æ‡§≤‡§æ ‡§ó‡§Ø‡§æ, ‡§µ‡§π‡•Ä ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§Ç‡§§ ‡§®‡§ø‡§ï‡§≤‡•á‡§ó‡§æ‡•§
// Last In, First Out ‚Üí ‡§ú‡•ã ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç ‡§°‡§æ‡§≤‡§æ ‡§ó‡§Ø‡§æ, ‡§µ‡§π‡•Ä ‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§®‡§ø‡§ï‡§≤‡•á‡§ó‡§æ‡•§

// Heap memory
// Heap Memory ‡§µ‡•ã ‡§ú‡§ó‡§π ‡§π‡•ã‡§§‡•Ä ‡§π‡•à ‡§ú‡§π‡§æ‡§Å ‡§™‡§∞ javascript ‡§Æ‡•á‡§Ç complex ‡§ö‡•Ä‡§ú‡§º‡•á‡§Ç ‡§ú‡•à‡§∏‡•á objects,
//  arrays, functions ‡§ï‡•ã run time ‡§™‡§∞ store ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§

// üß≥ ‡§ú‡•à‡§∏‡•á ‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§è‡§ï ‡§¨‡•à‡§ó ‡§≤‡•á ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•ã ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§Ü‡§™ ‡§ú‡§¨ ‡§ö‡§æ‡§π‡•ã ‡§ï‡•Å‡§õ ‡§°‡§æ‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•ã 
// ‡§î‡§∞ ‡§®‡§ø‡§ï‡§æ‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•ã ‚Äî ‡§Ø‡§π‡•Ä Heap ‡§π‡•à‡•§

// jitne bhi variables ya data hum banate hain unhe store kahi to karna 
// padta hain uske liye Heap Memory use hota hain

// example
//  1 + 2 + 3 + 4 + 5
//  browser did calculation like this
//  step 1] : 1 + 2 = 3 // jab tak browser step 2 ka calculation kar raha hoga tab tak step 1 ki value jaha par store ki jati hain use hum heap memory kahte hain
//  step 2] : 3 + 3 = 6 
//  step 3] : 6 + 4 = 10
//  step 4] : 10 + 5 = 15